{"version":3,"sources":["constants.js","reducers.js","Card.js","CardList.js","Searchbox.js","Spinner-1s-200px.svg","ErrorBoundary.js","App.js","action.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILURE","initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","name","email","id","className","alt","src","CardList","map","user","Searchbox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","this","children","Component","App","onRequestRobots","console","log","onSearchChange","filteredRobots","filter","robot","toLowerCase","startsWith","loader","connect","searchRobots","requestRobots","dispatch","e","textContent","target","value","payload","fetch","then","response","json","users","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.01d36088.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILURE = \"REQUEST_ROBOTS_FAILURE\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      console.log(action.type, action.payload);\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILURE:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"card flow-content\">\n      <img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} />\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map(user => {\n        const { name, email, id } = user;\n        return <Card key={id} name={name} email={email} id={id} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Searchbox = ({ searchChange }) => {\n  return (\n    <input type=\"text\" placeholder=\"Search Robots\" onChange={searchChange} />\n  );\n};\n\nexport default Searchbox;\n","export default __webpack_public_path__ + \"static/media/Spinner-1s-200px.54bb805a.svg\";","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n    };\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h2 className=\"error\">Page failed to load</h2>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"./CardList\";\nimport Searchbox from \"./Searchbox\";\nimport loader from \"./Spinner-1s-200px.svg\";\nimport { setSearchField, requestRobots } from \"./action\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: e => dispatch(setSearchField(e.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  componentDidUpdate() {\n    console.log(\"component updated\", this.props.robots, this.props.isPending);\n  }\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().startsWith(searchField.toLowerCase());\n    });\n    return (\n      <>\n        <header>\n          <h1>Robofriends</h1>\n        </header>\n        {isPending ? (\n          <img src={loader} alt=\"loader\" className=\"loader\" />\n        ) : (\n          <div>\n            <ErrorBoundary>\n              <Searchbox searchChange={onSearchChange} />\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILURE,\n} from \"./constants\";\n\nexport const setSearchField = textContent => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: textContent,\n});\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }));\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport ThunkMiddleware from \"redux-thunk\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware));\nconsole.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}